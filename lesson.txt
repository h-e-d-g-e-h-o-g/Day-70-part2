In this lesson, we will learn how to prevent certain files to be committed into local or remote repository.
The files that need to be prevented from committed into local or remote repo are:-
(1) The files in which important info are stored such as password, api key etc.
(2) The files that deals with local settings or user preferences such as .DS_STORE, these kind of files do not add any value.
They store things like how you want your file icons to be arranged inside a project folder and etc. 
NOTE:- To remove files from staging area, we use command "git rm --cached -r ."
-r represents recursive here, and "." represents all the files that are in staging area.
Now, talking about ".gitignore", in order to ignore files from being committed and added into the repository.
We need to specify them in the .gitignore file.

NOTE:- you can also use another way, such as if you can use "*.txt" to specify all the files with txt extension.
or "*.log" to specify all the files with log extension.

If you go to "github.com" and get to the repository named "gitignore".
It is a repository that has the collection of gitignore templates for different purposes.
These templates would have included the name of the files that need to be ignored to be committed.
There would be a python folder where files extension are mentioned of those files that should be ignored.

Now, talking about Git cloning.
In cloning, we clone the remote repository and pull it down onto the local repository on the local machine.
Through this, we pull down or take away all the commits and versions of the remote repository onto the local repository.
We got all the files of the remote repo into the local working directory.
So now, why do you clone repository, it might have several purposes such as:-
You want to clone the repository of product and want to give your own customization.
You want to add more functionality or you found a bug and want to fix it.
To make a clone of a repo, you need to use a command "git clone url of the remote repo".

Now, talking about branches and branching.
Here, we have one branch named "main", that is tracking our progress or the commits onto the repository.
The main branch represents kind of main idea of the repository.
If we want to add another functionality that may not abide with the main idea or trying to fix an error.
We can create another branch instead of making changes into the main branch.
To create a new branch, we can use command "git branch branch_name".
After creating another branch, you can still work on the main branch parallely.
If in future, I found that the work in the another branch is useful to the repo, then I can merge the another branch
with the main branch through command "git merge branch_name".
To switch between branches, you need to use command "git checkout branch_name".
To merge the side branch with the main branch, you need to be in the main branch.
By using command "git branch" you can see all the branches that are in the repo.
* sign represents the current branch.